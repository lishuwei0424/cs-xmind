/*
// 面试题65：不用加减乘除做加法
// 题目：写一个函数，求两个整数之和，要求在函数体内不得使用＋、－、×、÷
// 四则运算符号。
*/

#include <iostream>
using namespace std;

//位运算
//n和1做与运算，判断n的最低位是不是1,接着把1左移动一位得到2，再和n做与运算，就能判断n的次低位是不是1.。。。
//把一个整数减去1,再和原整数做与运算，会把该整数最右边的1变为0
//那么一个整数的二进制表示中有多少个1,就可以进行多少次这样的操作



//第一步各位相加但不计进位，101+10001=10100
//0+0,1+1结果都是0,0+1,1+0结果都是1,用异或

//第二步：记下进位10,和第一步结果相加 10100+10=10110
//1+1时候产生进位，两个数先做位与运算，然后再向左移动一位，只有两个数都是1的时候，位与得到结果才是1,其余的都是0

//第三步：将前两步结果相加,依然是重复前面两步，直到不产生进位为止

int Add(int num1,int num2)
{
    int sum,carry;

    do
    {
        //第一步
        sum=num1^num2;

        //第二步
        carry=(num1 & num2)<<1;

        num1=sum;
        num2=carry;
    }while(num2!=0);

    return num1;
}



int main()
{

    int result= Add(111, 899);

    cout<<result<<endl;

    return 0;
}